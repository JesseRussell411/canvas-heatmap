{"version":3,"file":"HeatmapGenerator.js","sourceRoot":"","sources":["../src/HeatmapGenerator.ts"],"names":[],"mappings":"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","sourcesContent":["import { defaultGradientStops, generateGradient } from \"./gradientGenerator\";\r\nimport { CanvasLike, CanvasRenderingContext2DLike } from \"./types/canvas\";\r\nimport { Gradient, GradientStops } from \"./types/gradient\";\r\n\r\n/**\r\n * Draws a heatmap onto a canvas or a 2d canvas drawing context.\r\n * This canvas or context only needs to implement the needed methods.\r\n * It can be a node-canvas, skia-canvas, browser canvas, OffscreenCanvas,\r\n * or possibly any other canvas. Try it and see if it works.\r\n */\r\nexport default class HeatmapGenerator {\r\n    private readonly context: CanvasRenderingContext2DLike;\r\n    private gradientData: Uint8ClampedArray;\r\n    private userGradient: GradientStops;\r\n    private readonly width: number;\r\n    private readonly height: number;\r\n\r\n    public constructor(\r\n        ...args:\r\n            | [\r\n                  context: CanvasRenderingContext2DLike,\r\n                  width: number,\r\n                  height: number,\r\n                  gradientStops?: GradientStops\r\n              ]\r\n            | [canvas: CanvasLike, gradient?: GradientStops]\r\n            | [...any]\r\n    ) {\r\n        if (args.length === 1 || args.length === 2) {\r\n            const [canvas, gradient = defaultGradientStops] = args;\r\n\r\n            const context = canvas.getContext(\"2d\");\r\n            if (null === context) throw new Error(\"getContext returned null\");\r\n\r\n            this.context = context;\r\n            this.width = canvas.width;\r\n            this.height = canvas.height;\r\n            this.userGradient = gradient;\r\n            this.gradientData = generateGradient(gradient);\r\n        } else if (args.length === 3 || args.length === 4) {\r\n            const [context, width, height, gradient = defaultGradientStops] =\r\n                args;\r\n\r\n            this.context = context;\r\n\r\n            this.width = width;\r\n            this.height = height;\r\n            this.userGradient = gradient;\r\n            this.gradientData = generateGradient(gradient);\r\n        } else {\r\n            throw new Error(\"incorrect number of arguments\");\r\n        }\r\n    }\r\n\r\n    public get gradient(): GradientStops {\r\n        return this.userGradient;\r\n    }\r\n\r\n    public set gradient(value: GradientStops) {\r\n        this.gradientData = generateGradient(value);\r\n        this.userGradient = value;\r\n    }\r\n\r\n    /**\r\n     * Draws a grid of points on the heatmap.\r\n     * @param data A 2d array of normalized (0.0 to 1.0) data points stored as an array of rows.\r\n     * The number of columns is determined by the length of the first row. If there are no rows,\r\n     * then the number of columns is determined to be 0.\r\n     */\r\n    public drawPointGrid(\r\n        data: readonly (readonly number[])[],\r\n        {\r\n            radius1 = 0.25,\r\n            radius2 = 0.75,\r\n        }: { radius1?: number; radius2?: number } = {}\r\n    ): void {\r\n        if (this.width === 0 || this.height === 0) return;\r\n        const rows = data.length;\r\n        const columns = data[0]?.length ?? 0;\r\n\r\n        const columnWidth = this.width / columns;\r\n        const rowHeight = this.height / rows;\r\n\r\n        const averageScale = (columnWidth + rowHeight) / 2;\r\n\r\n        const r1 = averageScale * radius1;\r\n        /** d2 */\r\n        const r2 = averageScale * radius2;\r\n\r\n        for (let r = 0; r < rows; r++) {\r\n            for (let c = 0; c < columns; c++) {\r\n                const x = (c + 0.5) * columnWidth;\r\n                const y = (r + 0.5) * rowHeight;\r\n                const value = data[r]?.[c] ?? 0;\r\n                this.drawPoint(x, y, r1, r2, value);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Draw a single point on the heatmap\r\n     * \r\n     * @param x The x coordinate of the point.\r\n     * @param y The y coordinate of the point.\r\n     * @param r1 The inner, solid radius of the point.\r\n     * @param r2 The outer, gradient radius of the point.\r\n     */\r\n    public drawPoint(\r\n        x: number,\r\n        y: number,\r\n        r1: number,\r\n        r2: number,\r\n        alpha: number\r\n    ): void {\r\n        if (this.width === 0 || this.height === 0) return;\r\n\r\n        const grd = this.context.createRadialGradient(x, y, r1, x, y, r2);\r\n        grd.addColorStop(0, `rgba(255, 255, 255, ${alpha})`);\r\n        grd.addColorStop(1, \"rgba(255, 255, 255, 0)\");\r\n\r\n        this.context.fillStyle = grd;\r\n        const fullRadius = Math.max(r1, r2);\r\n        this.context.fillRect(\r\n            x - fullRadius,\r\n            y - fullRadius,\r\n            fullRadius * 2,\r\n            fullRadius * 2\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Colorizes the heatmap. Before calling this function, the heatmap is grayscale.\r\n     */\r\n    public colorize(\r\n        gradient: GradientStops | Gradient = this.gradientData\r\n    ): void {\r\n        if (!(gradient instanceof Uint8ClampedArray)) {\r\n            return this.colorize(generateGradient(gradient));\r\n        }\r\n\r\n        if (this.width === 0 || this.height === 0) return;\r\n        const imageData = this.context.getImageData(\r\n            0,\r\n            0,\r\n            this.width,\r\n            this.height\r\n        );\r\n        const data = imageData.data;\r\n\r\n        for (let i = 0; i < data.length; i += 4) {\r\n            const strength = data[i + 3]!;\r\n            const red = gradient[strength * 4 + 0]!;\r\n            const green = gradient[strength * 4 + 1]!;\r\n            const blue = gradient[strength * 4 + 2]!;\r\n            const alpha = gradient[strength * 4 + 3]!;\r\n\r\n            data[i + 0] = red;\r\n            data[i + 1] = green;\r\n            data[i + 2] = blue;\r\n            data[i + 3] = alpha;\r\n        }\r\n\r\n        this.context.putImageData(imageData, 0, 0);\r\n    }\r\n\r\n    /**\r\n     * Removes all transparency from the heatmap.\r\n     */\r\n    public makeOpaque() {\r\n        if (this.width === 0 || this.height === 0) return;\r\n        const imageData = this.context.getImageData(\r\n            0,\r\n            0,\r\n            this.width,\r\n            this.height\r\n        );\r\n        const data = imageData.data;\r\n        for (let i = 0; i < data.length; i += 4) {\r\n            data[i + 3] = 255;\r\n        }\r\n        this.context.putImageData(imageData, 0, 0);\r\n    }\r\n}\r\n"]}